{"version":3,"sources":["components/Card.js","components/CardList.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","name","type","encodedName","split","join","url","className","class","href","CardList","cardObj","person","planet","species","App","fetchPeople","fetch","then","response","json","personData","setState","prevState","Object","assign","fetchPlanet","fetchSpecies","handleChange","date","urls","getFullYear","getMonth","getDate","birthDate","state","Date","this","console","log","selected","onChange","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"+OAaeA,EAXF,SAAC,GAAkB,IAAjBC,EAAgB,EAAhBA,KAAMC,EAAU,EAAVA,KACdC,EAAcF,EAAKG,MAAM,KAAKC,KAAK,KACnCC,EAAG,2CAAuCH,GAChD,OACC,yBAAKI,UAAU,2DACd,wBAAIA,UAAU,aAAaL,EAA3B,SACA,4BAAI,uBAAGM,MAAM,yCAAyCC,KAAMH,GAAML,MCKtDS,EAVE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QAClB,OACC,yBAAKJ,UAAU,qBACf,kBAAC,EAAD,CAAMN,KAAMU,EAAQC,OAAQV,KAAK,cAC/B,kBAAC,EAAD,CAAMD,KAAMU,EAAQE,OAAQX,KAAK,WACjC,kBAAC,EAAD,CAAMD,KAAMU,EAAQG,QAASZ,KAAK,cC+EvBa,G,8DAhFb,aAAe,IAAD,8BACZ,gBAYFC,YAAc,SAACV,GACbW,MAAMX,GACLY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,UAAS,SAAAC,GACZ,IAAIZ,EAAUa,OAAOC,OAAO,GAAIF,EAAUZ,SAE1C,OADAA,EAAQC,OAASS,EAAWpB,KACrB,CAAEU,kBApBD,EAwBde,YAAc,SAACpB,GACbW,MAAMX,GACLY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,UAAS,SAAAC,GACZ,IAAIZ,EAAUa,OAAOC,OAAO,GAAIF,EAAUZ,SAE1C,OADAA,EAAQE,OAASQ,EAAWpB,KACrB,CAAEU,kBA/BD,EAmCdgB,aAAe,SAACrB,GACdW,MAAMX,GACLY,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,UAAS,SAAAC,GACZ,IAAIZ,EAAUa,OAAOC,OAAO,GAAIF,EAAUZ,SAE1C,OADAA,EAAQG,QAAUO,EAAWpB,KACtB,CAAEU,kBA1CD,EA8CdiB,aAAe,SAACC,GACd,IAAMC,EAAO,CAAC,qCAAD,OAC0BD,EAAKE,cAAgB,GAAK,EADpD,kDAE2BF,EAAKG,WAAa,EAF7C,kDAG2BH,EAAKI,UAHhC,MAKb,EAAKjB,YAAYc,EAAK,IACtB,EAAKJ,YAAYI,EAAK,IACtB,EAAKH,aAAaG,EAAK,IACvB,EAAKR,SAAS,CACZY,UAAWL,KAtDb,EAAKM,MAAQ,CACXxB,QAAS,CACPC,OAAQ,GACRC,OAAQ,GACRC,QAAS,IAEXoB,UAAW,IAAIE,KACfN,KAAM,IATI,E,qDA4DJ,IAAD,EACmBO,KAAKF,MAAvBxB,EADD,EACCA,QADD,EACUmB,KAEjB,OADAQ,QAAQC,IAAI5B,GAEV,yBAAKJ,UAAU,MACb,wBAAIA,UAAU,6BAAd,uBACA,wBAAIA,UAAU,6BAAd,wBACA,kBAAC,IAAD,CACAiC,SAAUH,KAAKF,MAAMD,UACrBO,SAAUJ,KAAKT,eAEf,6BACA,6BACA,kBAAC,EAAD,CAAUjB,QAASA,S,GA1ET+B,c,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACC,kBAAC,EAAD,OAEDC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBrC,MAAK,SAAAsC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLrB,QAAQqB,MAAMA,EAAMC,a","file":"static/js/main.0fa0b5fa.chunk.js","sourcesContent":["import React from 'react';\n\nconst Card = ({name, type}) => {\n\tconst encodedName = name.split(' ').join('_');\n\tconst url = `https://starwars.fandom.com/wiki/${encodedName}`;\n\treturn (\n\t\t<div className=\"signs tc fl w-100 w-third-ns pa2 pv5 ba bw2 b--gold pa2\">\n\t\t\t<h3 className=\"yellow f4\">{type} Sign</h3>\n\t\t\t<h2><a class=\"link b dim light-yellow hover-mid-gray\" href={url}>{name}</a></h2>\n\t\t</div>\n\t\t);\n}\n\nexport default Card;","import React from 'react';\nimport Card from \"./Card\";\n\nconst CardList = ({cardObj}) => {\n\treturn (\n\t\t<div className=\"mw9 center ph3-ns\">\n\t\t<Card name={cardObj.person} type=\"Character\" />\n\t  \t<Card name={cardObj.planet} type=\"Planet\" />\n\t  \t<Card name={cardObj.species} type=\"Species\" />\n\t  \t</div>\n  \t)\n}\n\nexport default CardList;","import React, { Component } from 'react';\nimport DatePicker from \"react-datepicker\";\nimport CardList from '../components/CardList';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      cardObj: {\n        person: \"\",\n        planet: \"\",\n        species: \"\"\n      },\n      birthDate: new Date(),\n      urls: [],\n    }\n  }\n\n  fetchPeople = (url) => {\n    fetch(url)\n    .then(response => response.json())\n    .then(personData => {\n      this.setState(prevState => {\n        let cardObj = Object.assign({}, prevState.cardObj);\n        cardObj.person = personData.name;\n        return { cardObj };\n      })});\n  };\n\n  fetchPlanet = (url) => {\n    fetch(url)\n    .then(response => response.json())\n    .then(personData => {\n      this.setState(prevState => {\n        let cardObj = Object.assign({}, prevState.cardObj);\n        cardObj.planet = personData.name;\n        return { cardObj };\n      })});\n  };\n\n  fetchSpecies = (url) => {\n    fetch(url)\n    .then(response => response.json())\n    .then(personData => {\n      this.setState(prevState => {\n        let cardObj = Object.assign({}, prevState.cardObj);\n        cardObj.species = personData.name;\n        return { cardObj };\n      })});\n  };\n\n  handleChange = (date) => {\n    const urls = [\n      `https://swapi.py4e.com/api/people/${date.getFullYear() % 30 + 1}/`,\n      `https://swapi.py4e.com/api/planets/${date.getMonth() + 1}/`,\n      `https://swapi.py4e.com/api/species/${date.getDate()}/`\n    ];\n    this.fetchPeople(urls[0]);\n    this.fetchPlanet(urls[1]);\n    this.fetchSpecies(urls[2]);\n    this.setState({\n      birthDate: date\n    });\n  };\n\n  render() {\n    const { cardObj, urls } = this.state;\n    console.log(cardObj);\n    return (\n      <div className=\"tc\">\n        <h1 className=\"f1 fl w-100 pa2 tc yellow\">STAR WARS HOROSCOPE</h1>\n        <h4 className=\"f3 fl w-100 pa2 tc yellow\">Enter your birthday:</h4>\n        <DatePicker\n        selected={this.state.birthDate}\n        onChange={this.handleChange}\n        />\n        <br />\n        <br />\n        <CardList cardObj={cardObj} />\n      </div>\n    );\n  }\n\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './containers/App';\nimport './index.css';\nimport 'tachyons';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n  \t<App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}